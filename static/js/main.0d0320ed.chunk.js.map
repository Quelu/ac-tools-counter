{"version":3,"sources":["tools.js","Tool.js","App.js","serviceWorker.js","index.js"],"names":["name","durability","Tool","useCookies","cookie","setCookie","useState","parseInt","count","setCount","useEffect","className","style","textAlign","onClick","src","alt","width","App","chunkValue","useScreenClass","CookiesProvider","message","chunk","tools","map","toolsRow","tool","md","xs","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"0TAAe,G,MAAA,CACb,CAAEA,KAAM,qBAAsBC,WAAY,IAC1C,CAAED,KAAM,cAAeC,WAAY,IACnC,CAAED,KAAM,aAAcC,WAAY,IAClC,CAAED,KAAM,MAAOC,WAAY,IAC3B,CAAED,KAAM,gBAAiBC,WAAY,IACrC,CAAED,KAAM,SAAUC,WAAY,KAC9B,CAAED,KAAM,gBAAiBC,WAAY,KACrC,CAAED,KAAM,aAAcC,WAAY,IAClC,CAAED,KAAM,YAAaC,WAAY,KACjC,CAAED,KAAM,MAAOC,WAAY,KAC3B,CAAED,KAAM,aAAcC,WAAY,KAClC,CAAED,KAAM,sBAAuBC,WAAY,IAC3C,CAAED,KAAM,eAAgBC,WAAY,KACpC,CAAED,KAAM,YAAaC,WAAY,M,gBCoCpBC,G,MA7CF,SAAC,GAA0B,IAAxBF,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,WAAiB,EACTE,YAAW,CAAC,qBADH,mBAC9BC,EAD8B,KACtBC,EADsB,OAGXC,mBAASC,SAASH,EAAOJ,KAAU,GAHxB,mBAG9BQ,EAH8B,KAGvBC,EAHuB,KASrC,OAJAC,qBAAU,WACRL,EAAUL,EAAMQ,KACf,CAACA,IAGF,yBAAKG,UAAU,UAAUC,MAAO,CAAEC,UAAW,WAC3C,6BACE,4BAAQC,QAAS,kBAAMN,EAAQP,GAAcQ,EAASD,EAAQ,KAC5D,yBACEO,IAAG,iBAAYf,EAAZ,QACHgB,IAAKhB,EACLY,MAAO,CAAEK,MAAO,YAItB,yBAAKN,UAAU,oBACb,2BACE,4BACEA,UAAU,kCACVG,QAAS,kBAAMN,EAAQ,GAAKC,EAASD,EAAQ,KAF/C,OAOF,2BACE,4BACEG,UAAU,wCACVG,QAAS,kBAAMN,EAAQ,GAAKC,EAAS,KAFvC,UAOF,2BACGD,EADH,IACWP,OCWJiB,MA5Cf,WACE,IACIC,EAAa,EACjB,OAFoBC,4BAGlB,IAAK,KACL,IAAK,KACHD,EAAa,EACb,MACF,IAAK,KACL,IAAK,KACL,IAAK,KACHA,EAAa,EAMjB,OACE,kBAACE,EAAA,EAAD,KACE,kBAAC,IAAD,CACIC,QAAQ,uBACRlB,OAAO,gCAEX,yBAAKO,UAAU,OACb,kBAAC,YAAD,KACE,gCACE,8DAEDY,gBAAMC,EAAOL,GAAYM,KAAI,SAACC,GAAD,OAC5B,kBAAC,MAAD,KACGA,EAASD,KAAI,SAACE,GAAD,OACZ,kBAAC,MAAD,CAAKC,GAAI,EAAGC,GAAI,GACd,kBAAC,EAASF,eC9BRG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMzB,c","file":"static/js/main.0d0320ed.chunk.js","sourcesContent":["export default [\n  { name: \"flimsy-fishing-rod\", durability: 10 },\n  { name: \"fishing-rod\", durability: 30 },\n  { name: \"flimsy-net\", durability: 10 },\n  { name: \"net\", durability: 30 },\n  { name: \"flimsy-shovel\", durability: 25 },\n  { name: \"shovel\", durability: 100 },\n  { name: \"golden-shovel\", durability: 200 },\n  { name: \"flimsy-axe\", durability: 40 },\n  { name: \"stone-axe\", durability: 100 },\n  { name: \"axe\", durability: 100 },\n  { name: \"golden-axe\", durability: 200 },\n  { name: \"flimsy-watering-can\", durability: 20 },\n  { name: \"watering-can\", durability: 100 },\n  { name: \"slingshot\", durability: 20 },\n];\n","import React, { useState, useEffect } from \"react\";\nimport { useCookies } from \"react-cookie\";\n\nimport \"./Tool.css\";\n\nconst Tool = ({ name, durability }) => {\n  const [cookie, setCookie] = useCookies([`AC-tools-counter`]);\n\n  const [count, setCount] = useState(parseInt(cookie[name]) || 0);\n\n  useEffect(() => {\n    setCookie(name, count);\n  }, [count]);\n\n  return (\n    <div className=\"counter\" style={{ textAlign: \"center\" }}>\n      <div>\n        <button onClick={() => count < durability && setCount(count + 1)}>\n          <img\n            src={`/tools/${name}.png`}\n            alt={name}\n            style={{ width: \"100%\" }}\n          />\n        </button>\n      </div>\n      <div className=\"counter__content\">\n        <p>\n          <button\n            className=\"counter__action counter__action\"\n            onClick={() => count > 0 && setCount(count - 1)}\n          >\n            -1\n          </button>\n        </p>\n        <p>\n          <button\n            className=\"counter__action counter__action--warn\"\n            onClick={() => count > 0 && setCount(0)}\n          >\n            Reset\n          </button>\n        </p>\n        <p>\n          {count}/{durability}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default Tool;\n","import React from \"react\";\nimport { chunk } from \"lodash\";\nimport { CookiesProvider } from \"react-cookie\";\nimport { Container, Row, Col, useScreenClass } from \"react-grid-system\";\nimport CookieBanner from \"react-cookie-banner\";\n\nimport \"./App.css\";\nimport tools from \"./tools\";\nimport Tool from \"./Tool\";\n\nfunction App() {\n  const screenClass = useScreenClass();\n  let chunkValue = 2;\n  switch (screenClass) {\n    case \"xs\":\n    case \"sm\":\n      chunkValue = 4;\n      break;\n    case \"md\":\n    case \"lg\":\n    case \"xl\":\n      chunkValue = 6;\n      break;\n\n    default:\n      break;\n  }\n  return (\n    <CookiesProvider>\n      <CookieBanner\n          message=\"Yes, we use cookies.\"\n          cookie=\"ac-counter-accepted-cookies\"\n        />\n      <div className=\"App\">\n        <Container>\n          <header>\n            <h1>Animal Crossing Tools Counter</h1>\n          </header>\n          {chunk(tools, chunkValue).map((toolsRow) => (\n            <Row>\n              {toolsRow.map((tool) => (\n                <Col md={2} xs={3}>\n                  <Tool {...tool} />\n                </Col>\n              ))}\n            </Row>\n          ))}\n        </Container>\n        \n      </div>\n    </CookiesProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}